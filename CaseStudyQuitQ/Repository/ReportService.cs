using CaseStudyQuitQ.Data;
using CaseStudyQuitQ.Dto;
using Microsoft.EntityFrameworkCore;

namespace CaseStudyQuitQ.Repository {
    public class ReportService:IReportService {
        private readonly QuitQEcomContext _context;

        public ReportService(QuitQEcomContext context) {
            _context = context;
        }

        // 1. Generate Top Sellers Report (products with highest sales)

        public async Task<List<TopSellerReportDto>> GetTopSellersReportAsync() {
            var topSellers = await _context.Orders
                .GroupBy(o => o.Product.SellerId)  // Group by SellerId
                .Select(g => new TopSellerReportDto
                {
                    SellerId = g.Key,  // SellerId is now the group key
                    SellerName = g.FirstOrDefault().Product.Seller.FirstName + " " + g.FirstOrDefault().Product.Seller.LastName, // Seller's name
                    TotalQuantitySold = g.Sum(o => o.Quantity), // Total quantity sold by the seller
                    TotalRevenue = g.Sum(o => o.Quantity * o.Product.Price) // Total revenue generated by the seller
                })
                .OrderByDescending(r => r.TotalRevenue) // Order by revenue
                .ToListAsync();

            return topSellers;
        }

        public async Task<List<ProductRevenueReportDto>> GetProductRevenueReportAsync() {
            var productRevenue = await _context.Orders
                .GroupBy(o => o.ProductId)
                .Select(g => new ProductRevenueReportDto
                {
                    ProductId = g.Key,
                    ProductName = g.FirstOrDefault().Product.Name,
                    TotalRevenue = g.Sum(o => o.Quantity * o.Product.Price)
                })
                .ToListAsync();

            return productRevenue;
        }

        // 3. Generate Category Revenue Report
        public async Task<List<CategoryRevenueReportDto>> GetCategoryRevenueReportAsync() {
            var categoryRevenue = await _context.Orders
                .GroupBy(o => o.Product.CategoryId)
                .Select(g => new CategoryRevenueReportDto
                {
                    CategoryId = g.Key,
                    CategoryName = g.FirstOrDefault().Product.Category.Name,
                    TotalRevenue = g.Sum(o => o.Quantity * o.Product.Price)
                })
                .ToListAsync();

            return categoryRevenue;
        }
        // 4. Generate Subcategory Revenue Report
        public async Task<List<SubCategoryRevenueReportDto>> GetSubCategoryRevenueReportAsync() {
            var subcategoryRevenue = await _context.Orders
                .GroupBy(o => o.Product.SubCategoryId)
                .Select(g => new SubCategoryRevenueReportDto
                {
                    SubCategoryId = g.Key,
                    SubCategoryName = g.FirstOrDefault().Product.SubCategory.Name,
                    TotalRevenue = g.Sum(o => o.Quantity * o.Product.Price)
                })
                .ToListAsync();

            return subcategoryRevenue;
        }
        }
}
